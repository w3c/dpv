{% from 'macro_term_table.jinja2' import index_concepts %}
{% from 'macro_term_table.jinja2' import list_hierarchy %}
{% from 'macro_term_table.jinja2' import table_properties %}
{% from 'macro_example.jinja2' import example_aside %}
{% from 'macro_dpv_document_family.jinja2' import dpv_document_family, sotd, funding_acknowledgements, contributors_list, authors_list %}
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>{% block title %}Rules{% endblock title %}</title>
  <script src="https://www.w3.org/Tools/respec/respec-w3c" class="remove" defer></script>
  {% block RESPEC %}
  <script class="remove">
   // All config options at https://respec.org/docs/ 
   var respecConfig = {
    shortName: "dpv",
    title: "Rules",
    subtitle: "concepts in Data Privacy Vocabulary (DPV)",
    publishDate: "{{data[vocab_name+'-metadata']['dct:modified']}}",
    specStatus: "{{vocab_name|get_document_status}}",
    group: "dpvcg",
    latestVersion: "https://w3id.org/dpv/dpv/modules/rules",
    canonicalUri: "https://w3id.org/dpv/dpv/modules/rules",
    edDraftURI: "https://dev.dpvcg.org/dpv/modules/rules",
    github: "w3c/dpv",
    subjectPrefix: "[dpv]",
    doJsonLd: true,
    lint: { "no-unused-dfns": false, "local-refs-exist": true },
    editors: [
    {
      name: "Harshvardhan J. Pandit",
      url: "https://harshp.com/",
      "company": "{{ "Harshvardhan J. Pandit" | generate_author_affiliation }}",
    }
    ],
    otherLinks: [
      {
        "key": "This Release",
        "data": [
            {
              "value": "https://w3id.org/dpv/{{DPV_VERSION}}/modules/rules",
              "href": "https://w3id.org/dpv/{{DPV_VERSION}}/modules/rules"
            }
        ]
      },
      {
        "key": "Previous Release",
        "data": [
            {
              "value": "https://w3id.org/dpv/{{DPV_PREVIOUS_VERSION}}/modules/rules",
              "href": "https://w3id.org/dpv/{{DPV_PREVIOUS_VERSION}}/modules/rules"
            }
        ]
      },
      {
        "key": "Changelog",
        "data": [
            {
              "value": "Changelog for v{{DPV_VERSION}}",
              "href": "https://w3id.org/dpv/{{DPV_VERSION}}/dpv#changelog"
            }
        ]
      },
      {
        "key": "Key Publications",
        "data": [
            {
              "value": "Data Privacy Vocabulary (DPV) -- Version 2.0 (2024)",
              "href": "https://doi.org/10.1007/978-3-031-77847-6_10"
            },
            {
              "value": "Creating a Vocabulary for Data Privacy (2019)",
              "href": "https://doi.org/10.1007/978-3-030-33246-4_44"
            }
        ]
      }
    ],
    localBiblio: {%  include 'references.json' %}
  };
</script>
{% endblock RESPEC %}
<link rel="stylesheet" type="text/css" href="../../diagrams/common.css">
<link rel="shortcut icon" href="../../diagrams/favicon-16x16.png" type="image/x-icon" sizes="16x16" />
  <link rel="shortcut icon" href="../../diagrams/favicon-32x32.png" type="image/x-icon" sizes="32x32" />
</head>
<body>
  {{ contributors_list(data, vocab_name) }}
{% block ABSTRACT %}
    <section id="abstract">
      <p>This document provides additional details and examples for rules concepts for permission, prohibition, and obligation used in the Data Privacy Vocabulary [[DPV]], and is a companion to the [[DPV]] specification.</p>
    </section>
      {{ sotd(DPV_VERSION=DPV_VERSION, metadata=data[vocab_name+'-metadata']) }}
{{ dpv_document_family(document='dpv-spec') }}
{% endblock ABSTRACT %}
  <section id="vocab-rules">
    <h2>Introduction</h2>
    <figure>
    <img src="../../diagrams/Rules.svg" />
    <figcaption></figcaption>
  </figure>
    <p>DPV provides the concept [=Rule=] to specify requirements, constraints, and other forms of 'rules' that are associated with specific contexts (e.g., processing activities) using the relation [=hasRule=]. DPV provides three forms of Rules to represent [=Permission=], [=Prohibition=] and [=Obligation=], and their corresponding relations [=hasPermission=], [=hasProhibition=] and [=hasObligation=], to indicate a Rule that specifies whether something is permitted, prohibited or an obligation, respectively.</p>

    <p>[=Permission=] refers to the indicated context being allowed or approved to be carried out. Permissions are only a 'permissive signal' i.e. it is not necessary to carry out an activity just because it is permitted (see obligation for this). Permissions can be used to record what has been permitted or to distinguish the 'permissive' parts from other 'non-permissive' or prohibitive parts, such as in use-cases for policies, agreements, consent records, and risk assessments. </p>
    <p>[=Prohibition=] represents the indicated context is not allowed or it is not approved to be carried out. If something is expressed as a prohibition - it explicitly indicates that it must not occur. Unlike permission, prohibition is a 'strong' rule i.e. if something is prohibited, then it is necessary that it not be carried out.</p>
    <p>[=Obligation=] is the antipodal rule for prohibitions, which means if something is an obligation then it is necessary for it to be carried. It differs from permissions - which are a 'soft' rule i.e. a permitted activity is not necessary to be carried out.</p>

    <p>DPV does not define additional semantics for rules and limits its scope and focus to provide a simple way to specify permissions, prohibitions, and obligations as common rules associated with activities. For a more extensive and richer set of semantics and concepts to represent rules, DPVCG suggests looking towards other languages, such as [[ODRL]], [[SHACL]], and [[RuleML]] that have been developed with the specific goal of representing and applying rules. We welcome contributions for aligning DPV with these, and for providing guidance on how to complement DPV's rule-based concepts with external languages.</p>
    
    {{ list_hierarchy(modules['rules']['classes']) }}
    {{ example_aside('dex:E0028') }}
    {{ example_aside('dex:E0066') }}
    <!-- dct:source can be used to indicate the source of the permission or prohibition e.g. prohibited by GDPR Art-9-1 -->

  </section>

  
  <section>
    <h2>Rule Fulfilment Status</h2>
    <p>The DPVCG is exploring representing the state of rule fulfilment through concepts, for example to represent a prohibition has been violated, or an obligation has been fulfilled, or a permission has been utilised. The currently provided concepts for these, represented by the concept [=RuleFulfilmentStatus=] and its taxonomy, which are associated using the relation `dpv:hasStatus`, indicate the intent and scope of this work.</p>
    <p>The DPVCG is working with ongoing efforts regarding similar modelling of concepts for ODRL implementations, in particular to ensure the concepts in DPV are in sync and compatible with those developed for ODRL. The below issue shows the progress for this.</p>
    <aside class="issue" data-number="189"></aside>
    {{ example_aside('dex:E0084') }}
  </section>

  <section>
    <h2>Interpreting Rules</h2>
    <section>
      <h3>Default Interpretation</h3>
      <p>Though DPV provides concepts representing <a href="https://en.wikipedia.org/wiki/Deontic_logic">deontic logic</a>, it does not specify what should be the 'default' interpretation in relation to rules, i.e. it does not provide an interpretation of whether some rules apply automatically unless otherwise declared. For example, in declaring an instance of Process, the assumption is that the activities are modelled for what is happening or what is intended/planned to happen. The explicit annotation using a Permission rule adds information about whether some activity is permitted (and its associated information). Instead, if the use-case is using DPV to only document activities that are permitted, there is no need to explicitly specify the permissions. Similarly, just because something is happening or planned to happen, it cannot be assumed to be permitted (e.g. pending evaluation of legal requirements). </p>
      <p>This lack of default interpretation enables modularity in the use of DPV concepts. For example, an instance of `dpv:Process` which does not have a `dpv:hasRule` declared within it, can be made part of a rule to specify permissions, prohibitions, or obligations regarding the process. If instead the process had a default interpretation (e.g. permission), then it would require creating a separate instance with the same information - leading to duplicated efforts. While an apparent solution is to create a mechanism whereby the rule in the process is overridden with the intended 'outer' rule or context e.g. to specify the prohibition in one process overrules permission in another process, this prevents the combination of rules to describe situations such as a permission for a larger context within which specific parts are prohibited or obligated.</p>
    </section>
    <section>
      <h3>Mixing/Nesting Rules</h3>
      <p>In representing Rules, DPV only provides the concept and does not express any inherent semantics on what those rules mean in relation to each other. For example, DPV does not express Permission to be non-compatible or disjoint from Prohibition. This is to separate the interpretation and application of rules based on the necessities of a use-case. For example, in a legal investigation it may be prudent to specify permission and prohibition can never occur together, but this may not be true if there are different legal requirements that allow a prohibition to be resolved or deferred, such as through another permission that overrides the prohibition.</p>
      <p>Further, as described earlier in the section on default interpretations, it is possible to mix or nest rules such as through processes. For example, if `ProcessA` is a permitted process and contains `ProcessB` which is a prohibited process, DPV does not dictate what should be default interpretation for this arrangement. The role of DPV concepts regarding rules, as of now, is to provide a simplified indication of whether something is permitted, prohibited, or obligated. Further interpretations require creation of a formal specification that dictates how rules should function together. For example, depending on the use-case, several interpretations are possible for the example described here:</p>
      <ol>
        <li><i>Prohibitive interpretation:</i> Both `ProcessA` and `ProcessB` are prohibited because through `ProcessA` is permitted, `ProcessB` is within it and is prohibited - thereby prohibiting both processes. Such interpretations prevent modularity - everything is prohibited because something is prohibited, or it is permitted because there are no prohibitions.</li>
        <li><i>Permissive interpretation:</i> `ProcessA` and `ProcessB` are both permitted since `ProcessA` gives permission for the entire process and overrides the prohibition in `ProcessB`. Such interpretations also prevent modularity - everything is permitted because the higher/broader processes are permitted even though there are specific prohibitions at a granular level.</li>
        <li><i>Contextually Prohibitive interpretation:</i> `ProcessB` is prohibited as declared, and the rest of `ProcessA` without `ProcessB` is permitted. If there was a further `ProcessC` that is permitted, and is present within `ProcessB`, then `ProcessC` would still be prohibited as the broader prohibition from `ProcessB` overrides it. Such interpretations permit modularity with permission granted for parts as long as there is no prohibition overriding it from a broader context. In this, a prohibition within a permission still allows the permitted parts to be carried out, whereas a permission within a prohibition would still be prohibited.</li>
        <li><i>Contextually Permissive interpretation:</i> This is the same as the contextually prohibitive interpretation, except permissions occurring within prohibitions are not overridden. This means, `ProcessA` is allowed through its permission, with `ProcessB` within it being prohibited, except for `ProcessC` within `ProcessB` - which is permitted.</li>
      </ol>
      <p>The above example interpretations only concerned permissions and prohibitions, and did not include obligations - or other concepts such as duties, dispensations, exceptions, and defeasibility. From this, it should be clear how the specification and interpretation of rules can be quite complex and has a large impact on the intended activities and information being documented.</p>
      <aside class="note" title="DPVCG is exploring providing rule interpretation concepts in future versions">
        <p>The DPVCG is discussing the provision of concepts to indicate the interpretation of rules as discussed above. These concepts would then be associated with rules to express how they should be interpreted - which would avoid ambiguities and ensure consistent interpretation through shared semantics.</p>
        <p>In addition, we are also interested in representing concepts for conflict resolution strategies - for example what should be done if an permission and a prohibition are expressed over the same resource. Like the interpretation concepts, the conflict resolution concepts would also be expressed along with the rules to ensure all implementations have a consistent interpretation and outcome regarding the rules.</p>
        <p>As with the Rules Fulfilment concepts, this work is expected to be in sync with the ODRL implementation work. We welcome ideas and participation in this process. See <a href="https://github.com/w3c/dpv/issues/189">Issue#189</a>.</p>
      </aside>
    </section>
  </section>
  <section>
    <h2>Triggering Rules</h2>
    <p>DPV does not define how rules are 'triggered' i.e. how to specify under what conditions a rule should become applicable or is exempted from being applied. Some common triggers for rules to be applied are provided here as examples:</p>
    <ol>
      <li><i>Ex-ante:</i> the rule is applied <u>before</u> the specified activity is carried out.</li>
      <li><i>Ex-post:</i> the rule is applied <u>after</u> the specified activity is carried out.</li>
      <li><i>Real-time:</i> the rule is applied <u>during</u> the specified activity being carried out.</li>
    </ol>
    <aside class="note" title="DPVCG is exploring providing rule trigger concepts in future versions">
      <p>The rule trigger concepts would represent when/how the rule is to be applied - as described above - and would further assist in explicitly representing the intended interpretation and application of a rule within the stated context. For example, whether an obligation associated with a process is to be carried out before the process starts (ex-ante trigger) or after it completes (ex-post trigger) would be interpreted through these concepts. In addition to these, further granular concepts would also assist in further expressing the intended actions - such as a prohibition that comes in to play only on failures of a process to complete successfully, or an obligation that only occurs if a process is successful.</p>
    </aside>
  </section>
  <section>
    <h2>Alignment with ODRL</h2>
    <p>[[ODRL]] provides a W3C standardised representation for expressing policies containing rules such as for permissions, prohibitions, obligations over 'assets' and the involved 'parties'. While ODRL focuses on providing a general structure for policies without jurisdictional concepts or modelling, it complements DPV by enabling declaration of policies, agreements, and other similar documents in a structured, interoperable, and standardised manner. The DPV concepts enable specifying the exact information within the structure provided by ODRL - which can be useful for two entities to exchange information. For example, in a controller-processor agreement, ODRL can be used to define the agreement in terms of involved parties, their roles, and which entity is responsible for performing which actions, as well as the expected ex-post consequences of those actions - such as for reporting from processor to controller, or to indicate what should be done should a particular requirement is violated.</p>
    <p>The DPVCG is interested in formally authorising a shared specification with the ODRL Community Group that outlines the use of DPV concepts for/with ODRL. The current proposal for this is to create an ODRL profile that declares DPV concepts in context of ODRL's conceptual model and through which DPV concepts can be correctly declared and used in ODRL. The current draft guidance document for use of DPV and ODRL is available at [[[GUIDE-ODRL]]], and the mapping of concepts between DPV and ODRL is available at [[[MAPPING-ODRL]]].</p>
    <aside class="issue" data-number="31"></aside>
    <aside class="issue" data-number="130"></aside>
  </section>

<section>
  <h2>Vocabulary Index</h2>
  <section id="classes">
    {{ index_concepts(modules['rules']['classes'], vocab_name, filter="classes") }}
  </section>
  <section id="properties">
    {{ index_concepts(modules['rules']['properties'], vocab_name, filter="properties") }}
  </section>
  <section id="external-concepts">
    <p>DPV uses the following terms from [[RDF]] and  [[RDFS]] with their defined meanings:</p>
    <ul>
      <li id="rdf:type"><dfn>rdf:type</dfn> to denote a concept is an instance of another concept</li>
      <li id="rdfs:Class"><dfn>rdfs:Class</dfn> to denote a concept is a Class or a category</li>
      <li id="rdfs:subClassOf"><dfn>rdfs:subClassOf</dfn> to specify the concept is a subclass (subtype, sub-category, subset) of another concept</li>
      <li id="rdf:Property"><dfn>rdf:Property</dfn> to denote a concept is a property or a relation</li>
      </ul>
    <p>The following external concepts are re-used within DPV:</p>
    {% set module_combined = modules['rules']['classes'].copy() %}
    {% set _ = module_combined.update(modules['rules']['properties']) %}
    {{ index_concepts(module_combined, vocab_name, filter="external") }}
  </section>
</section>
{% block ACKNOWLEDGEMENTS %}
<section id="funding-acknowledgements" class="notoc">
  <h2>Funding Acknowledgements</h2>

  <h3>Funding Sponsors</h3>
  {{ funding_acknowledgements() }}

  <h3>Funding Acknowledgements for Contributors</h3>
  <p>The contributions of Harshvardhan J. Pandit have been made with the financial support of Science Foundation Ireland under Grant Agreement No. 13/RC/2106_P2 at the ADAPT SFI Research Centre.</p>

</section>
{% endblock ACKNOWLEDGEMENTS %}
<script type="text/javascript" src="../../diagrams/common.js" defer></script>
</body>
</html>